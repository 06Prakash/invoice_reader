version: "3.9"

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    container_name: invoice_reader_backend
    ports:
      - "5001:5000"
    volumes:
      - ./backend:/app  # ✅ Corrected mount path
      - ./migrations:/app/migrations
      - ./logs:/app/logs
      - ./resources:/app/resources
      - ./uploads:/app/uploads
    env_file:
      - .env
    networks:
      - shared_network
    command: ["/bin/sh", "-c", "flask db upgrade && flask run --host=0.0.0.0 --port=5000 --reload"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health/check"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s

  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: build-frontend
    container_name: invoice_reader_frontend
    image: node:18-alpine
    working_dir: /frontend
    volumes:
      - ./frontend:/frontend
      - /frontend/node_modules
    ports:
      - "3000:3000"
    command: ["/bin/sh", "-c", "sleep 5 && npm start"]
    networks:
      - shared_network
    depends_on:
      backend:
        condition: service_healthy

  redis:
    image: "redis:alpine"
    container_name: invoice_reader_redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - shared_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    container_name: invoice_reader_celery
    restart: always
    command: ["/bin/sh", "-c", "sleep 10 && celery -A modules.services.background_service.upload_worker worker --loglevel=info"]
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    environment:
      - FLASK_APP=app:create_app
      - PYTHONPATH=/app
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - KEY_VAULT_URL=${KEY_VAULT_URL}  # ✅ Ensure this is set
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}  # ✅ Ensure this is set
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}  # ✅ Ensure this is set
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}  # ✅ Ensure this is set
    volumes:
      - ./backend:/app
    networks:
      - shared_network

networks:
  shared_network:
    external: true
